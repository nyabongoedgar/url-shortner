1. Project Structure

This Project has two main folders, the backend and the frontend folders containing the backend api
code and the frontend react js code respectively.

2. How to set up the 2 projects

(i). git clone https://github.com/nyabongoedgar/url-shortner.git

NB: Make sure that you have docker installed on your local machine

(ii). Run `$ make setup `
   This will build our docker containers for both the backend and the frontend components

(iii). Run ` $ make server ` to start and attach the containers for our services.

(iv). To run tests, run `$ make test `

3. How to use the application

- When both the backend and the frontend containers are running
- Navigate to localhost:3000 (assumming that the frontend is running on port 3000 )
- Paste a long url in the form provided
- Copy the short url generated and paste it in a new tab and observer the redirection.
- You can also try to change the short code, a 404 page will be presented.

4. Approach

Backend
-----------
Technologies

- I felt confident to use a package named `shortid` which creates amazingly short non-sequential url-friendly unique ids.
- Short id can generate any number of ids without duplicates, even millions per day.
- Short id also, by default uses 7-14 url-friendly characters: A-Z, a-z, 0-9, _-

Database
- MongoDB was used on the backend, simply because as a NOSQL database, we are guaranteed of faster lookup operations

Server Clustering
- A clustering technique was used on the backend to enable the creation of child processes (workers) that run simultaneously and share the same server port hence taking advantage of multiprocesser servers.

Frontend

- Our application is based on react js.

Caching layer

- With the caching layer, our application from the frontend point of view could really be so performant given that at times, all it has to do is hit the cache, pick the long url and redirect.

- We used react query on the frontend to simplify state management and introduce a caching layer which would in turn speed up our api lookup operations since some requests will hit the cache.

5. Assumptions

- We assume that we have no user authentication on the platform, therefore the links are not unique to a particular user.
- We also assume that we are not accomodating needs for vanity urls.